name: Full deploy to DigitalOcean

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@main

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 rso-k8s-cluster

        ### Web service build and deploy
      - name: Pull latest web service image
        run: docker pull registry.digitalocean.com/rso-registry/web:latest

      - name: Build web service image
        run: docker build -t registry.digitalocean.com/rso-registry/web:$(echo $GITHUB_SHA | head -c7) web

      - name: Tag web service image as latest
        run: docker image tag registry.digitalocean.com/rso-registry/web:$(echo $GITHUB_SHA | head -c7) registry.digitalocean.com/rso-registry/web:latest

      - name: Push web service images to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/rso-registry/web --all-tags

      - name: Update web deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|registry.digitalocean.com/rso-registry/web|registry.digitalocean.com/rso-registry/web:'${TAG}'|' $GITHUB_WORKSPACE/web/k8s/deployment.yaml

      - name: Apply Web Deployment to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/web/k8s/web-deployment.yaml

      - name: Apply Web Service to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/web/k8s/web-service.yaml

        ### Notification service build and deploy
      - name: Pull latest Notification service image
        run: docker pull registry.digitalocean.com/rso-registry/notification:latest

      - name: Build Notification service image
        run: docker build -t registry.digitalocean.com/rso-registry/notification:$(echo $GITHUB_SHA | head -c7) notification

      - name: Tag Notification service image as latest
        run: docker image tag registry.digitalocean.com/rso-registry/notification:$(echo $GITHUB_SHA | head -c7) registry.digitalocean.com/rso-registry/notification:latest

      - name: Push Notification service images to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/rso-registry/notification --all-tags

      - name: Update Notification deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|registry.digitalocean.com/rso-registry/notification|registry.digitalocean.com/rso-registry/notification:'${TAG}'|' $GITHUB_WORKSPACE/notification/k8s/notification-deployment.yaml

      - name: Apply Notification Deployment to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/notification/k8s/notification-deployment.yaml

      - name: Apply Notification Service to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/notification/k8s/notification-service.yaml

      - name: Apply Notification-Mongo Deployment to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/notification/k8s/notification-mongo-deployment.yaml

      - name: Apply Notification-Mongo Service to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/notification/k8s/notification-mongo-service.yaml

      - name: Apply Notification-Mongo PVC to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/notification/k8s/notification-mongo-claim0-persistentvolumeclaim.yaml

        ### Scraper service build and deploy
      - name: Pull latest Scraper service image
        run: docker pull registry.digitalocean.com/rso-registry/scraper:latest

      - name: Build Scraper service image
        run: docker build -t registry.digitalocean.com/rso-registry/scraper:$(echo $GITHUB_SHA | head -c7) scraper

      - name: Tag Scraper service image as latest
        run: docker image tag registry.digitalocean.com/rso-registry/scraper:$(echo $GITHUB_SHA | head -c7) registry.digitalocean.com/rso-registry/scraper:latest

      - name: Push Scraper service images to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/rso-registry/scraper --all-tags

      - name: Update Scraper deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|registry.digitalocean.com/rso-registry/scraper|registry.digitalocean.com/rso-registry/scraper:'${TAG}'|' $GITHUB_WORKSPACE/scraper/k8s/scraper-deployment.yaml

      - name: Apply Scraper Deployment to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/scraper/k8s/scraper-deployment.yaml

      - name: Apply RabbitMQ Deployment to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/scraper/k8s/rabbitmq-deployment.yaml

      - name: Apply RabbitMQ Service to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/scraper/k8s/rabbitmq-service.yaml

        ### Storage service build and deploy
      - name: Pull latest Storage service image
        run: docker pull registry.digitalocean.com/rso-registry/storage:latest

      - name: Build Storage service image
        run: docker build -t registry.digitalocean.com/rso-registry/storage:$(echo $GITHUB_SHA | head -c7) storage

      - name: Tag Storage service image as latest
        run: docker image tag registry.digitalocean.com/rso-registry/storage:$(echo $GITHUB_SHA | head -c7) registry.digitalocean.com/rso-registry/storage:latest

      - name: Push Storage service images to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/rso-registry/storage --all-tags

      - name: Update Storage deployment file
        run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|registry.digitalocean.com/rso-registry/storage|registry.digitalocean.com/rso-registry/storage:'${TAG}'|' $GITHUB_WORKSPACE/storage/k8s/storage-deployment.yaml

      - name: Apply Storage Deployment to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/storage/k8s/storage-deployment.yaml

      - name: Apply Storage Mongo Deployment to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/storage/k8s/storage-mongodb-deployment.yaml

      - name: Apply Storage Mongo Service to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/storage/k8s/storage-mongodb-service.yaml

      - name: Apply Storage Mongo PVC to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/storage/k8s/storage-mongodb-claim0-persistentvolumeclaim.yaml

      - name: Apply Storage Service to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/storage/k8s/storage-service.yaml

        ### Common deployment steps
      - name: Apply Issuer to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/k8s/production_issuer.yaml

      - name: Apply Ingress to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/k8s/ingress.yaml

      - name: Verify deployment
        run: kubectl rollout status deployment
